const Autocomplete={name:"autocomplete",template:`<div class="autocomplete"><input type="text" class="form-control" @input="onChange" v-model="search" @keyup.down="onArrowDown" @keyup.up="onArrowUp" @keyup.enter="onEnter" id="empInput" autocomplete="off"/><ul id="autocomplete-results" v-show="isOpen" class="autocomplete-results"><li class="loading" v-if="isLoading">Loading results...</li><li v-else v-for="(result, i) in results" :key="i" @click="setResult(result)" class="autocomplete-result" :class="{ 'is-active': i === arrowCounter }">{{ result }}</li></ul></div>`,props:{items:{type:Array,required:!1,default:()=>[]},isAsync:{type:Boolean,required:!1,default:!1}},data:()=>({isOpen:!1,results:[],search:"",isLoading:!1,arrowCounter:0}),methods:{onChange(){this.$emit("input",this.search),this.isAsync?this.isLoading=!0:(this.filterResults(),this.isOpen=!0)},filterResults(){this.results=this.items.filter(t=>t.toLowerCase().indexOf(this.search.toLowerCase())>-1)},setResult(t){this.search=t,this.isOpen=!1,this.$emit("completion",this.search)},onArrowDown(t){this.arrowCounter<this.results.length&&(this.arrowCounter=this.arrowCounter+1)},onArrowUp(){this.arrowCounter>0&&(this.arrowCounter=this.arrowCounter-1)},onEnter(){this.search=this.results[this.arrowCounter],this.isOpen=!1,this.arrowCounter=-1,this.$emit("completion",this.search)},handleClickOutside(t){this.$el.contains(t.target)||(this.isOpen=!1,this.arrowCounter=-1)}},watch:{items:function(t,e){t.length!==e.length&&(this.results=t,this.isLoading=!1)}},mounted(){document.addEventListener("click",this.handleClickOutside)},destroyed(){document.removeEventListener("click",this.handleClickOutside)}};